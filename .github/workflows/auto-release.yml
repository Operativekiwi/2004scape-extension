name: Auto Release for Extension Files

on:
  push:
    paths:
      - "content_script.js"
      - "background.js"
      - "manifest.json"
      - "style.css"
      - "icons/**"
      - "plugins/**/*.js"
      - "plugins/**/*.json"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install chrome-webstore-upload-cli
      run: npm install -g chrome-webstore-upload-cli

    - name: Prepare Chrome extension
      run: |
        cp manifest.json manifest.chrome.json
        zip -r chrome-extension.zip content_script.js background.js manifest.json style.css icons/ plugins/
        ls -l

    - name: Upload and Publish to Chrome Web Store
      env:
        EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
        REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
      run: |
        chrome-webstore-upload upload --source ./chrome-extension.zip --extension-id $EXTENSION_ID --client-id $CLIENT_ID --client-secret $CLIENT_SECRET --refresh-token $REFRESH_TOKEN
        chrome-webstore-upload publish --extension-id $EXTENSION_ID --client-id $CLIENT_ID --client-secret $CLIENT_SECRET --refresh-token $REFRESH_TOKEN

    - name: Create a GitHub release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: "v${{ github.run_number }}"
        release_name: "Auto Release v${{ github.run_number }}"
        body: Auto-generated release with the latest extension files.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Chrome extension ZIP to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "./chrome-extension.zip"
        asset_name: "chrome-extension.zip"
        asset_content_type: "application/zip"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Firefox extension
      run: |
        # Create a modified manifest for Firefox
        cp manifest.json manifest.firefox.json
        jq '.manifest_version = 2 
            | .background = {scripts: ["background.js"], persistent: false} 
            | .permissions += ["webRequest", "webRequestBlocking"] 
            | .web_accessible_resources = ["plugins/*.js", "plugins/*.json"]' manifest.firefox.json > manifest.firefox.json.tmp 
        mv manifest.firefox.json.tmp manifest.firefox.json
        mv manifest.firefox.json manifest.json  # Ensure correct filename inside the zip
        zip -r firefox-extension.zip content_script.js background.js manifest.json style.css icons/ plugins/
        ls -l

    - name: Upload Firefox extension ZIP to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "./firefox-extension.zip"
        asset_name: "firefox-extension.zip"
        asset_content_type: "application/zip"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Send Discord Notification
      run: |
        curl -H "Content-Type: application/json" -X POST -d '{
          "content": "ðŸ“¢ **New Auto Release Created!**",
          "embeds": [{
            "title": "Release: Auto Release v${{ github.run_number }}",
            "description": "New release created from latest commits.",
            "url": "${{ steps.create_release.outputs.html_url }}",
            "color": 5814783,
            "fields": [
              {
                "name": "Commit Message",
                "value": "${{ github.event.head_commit.message }}",
                "inline": false
              }
            ]
          }]
        }' ${{ secrets.DISCORD_WEBHOOK_URL }}
